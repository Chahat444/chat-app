import { NextAuthOptions } from "next-auth"
import { UpstashRedisAdapter } from "@next-auth/upstash-redis-adapter"
import { db } from "./db"
import GoogleProvider from "next-auth/providers/google" 

/* function to check the email id and verification code for user and if not 
filled give an error */
function getGoogleCredentials(){
const clientId = process.env.GOOGLE_CLIENT_ID
const clientSecret = process.env.GOOGLE_CLIENT_SECRET

if(!clientId || clientId.length === 0){
    throw new Error("Missing GOOGLE_CLIENT_ID")
}

if(!clientSecret || clientSecret.length === 0){
    throw new Error("Missing GOOGLE_CLIENT_SECRET")
}

return { clientId , clientSecret}
}

//we are creating a const authOptions of type NextAuthOptions(if we want, we can create an interface and describe that type object's properties )
export const authOptions: NextAuthOptions={

    /*adapter means everytime someone login with their email
    it will automatically saves the user data aka there 
    email and id in our database*/

    adapter: UpstashRedisAdapter(db),
    session:{

        /* jwt(json web tokens) means we don"t handle our session on the 
        database which allow us to verify the session in the mioddleware 
        later on to protect our routers*/

        strategy: "jwt"
    },
    pages:{
        signIn: "/login"
    },
    providers:[
        GoogleProvider({
        clientId: getGoogleCredentials().clientId,
        clientSecret: getGoogleCredentials().clientSecret
        }),
    ],

    /* checks if it is new user or already singed in user */
    callbacks:{

        /*async is a keyword you use to mark a function that will handle tasks that take some time, like getting data from the internet or reading files. It helps your program to keep doing other things while it waits.*/
        /*The await keyword is used inside an async function to pause the execution of the (code till it gives us some answer) function until a Promise is resolved or rejected.*/
        /*token id is automatically generated by the adapter */

        async jwt({ token, user }) {
            if (user) {
                token.id = user.id;
            } else {
                const dbUser = (await db.get(`user:${token.id}`)) as User | null;

                if (dbUser) {
                    token.id = dbUser.id;
                    token.name = dbUser.name;
                    token.email = dbUser.email;
                    token.picture = dbUser.image;
                }
            }
            return token;
        },
        async session({ session, token }) {
            if (token) {
                session.user.id = token.id;
                session.user.name = token.name;
                session.user.email = token.email;
                session.user.image = token.picture;
            }

            return session;
        },
        redirect() {
            return "/dashboard";
        },
    },
};